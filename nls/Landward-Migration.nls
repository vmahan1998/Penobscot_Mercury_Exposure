to migrate-landward
  ;; swimming ability 
  ; fish migrate inland directly upstream but swimming ability depends on swimming range of fish (determined by min-speed and max-speed), size of fish, and energy levels.

  ;; Define swimming range and ability
  let swimming-range max-speed - min-speed
  set speed min-speed + (energy / 100) * swimming-range ;; Adjust speed based on energy level
  let abs-current-velocity abs([velocity] of patch-here)
  ; takes more energy to migrate through higher velocities in the opposite direction (positive velocitities)
  
  ;; Energy expenditure increases with opposing velocity
  if [velocity] of patch-here > 0 [
    set energy energy - (abs-current-velocity * 0.2) ;; Higher velocity costs more energy
    set speed max (list (speed - (abs-current-velocity / 2)) min-speed) ;; Adjust speed against flow
  ]
  
  ; fish slow down as they start to get tired until they eventually stop and move with current downstream for resting 
  ; low velocity should be defined relative to swimming range of fish (determined by min-speed and max-speed), and size of fish
  ;; Fish slow down as they tire
  if energy < 50 [ ;; Define threshold for fatigue
    set speed speed * 0.5 ;; Reduce speed when tired
  ]
  if energy < 20 [ ;; Critically low energy
    print "Energy critically low. Moving downstream to rest."
    let downstream-patch one-of patches with [velocity < (swimming-range * 0.25)]
    if downstream-patch != nobody [
      face downstream-patch
      fd swimming-range * 0.5 ;; Drift downstream at a slower pace
      set energy energy + 1 ;; Regain energy slowly while resting
    ]
    stop
  ]
  
  ; must stay in patches where salinity is within 1-2 standard deviations of acclimated-salinity
  ;; fish must rest to regain energy and acclimate to salinity (move downstream with current or in patches with low velocity (may be species dependent))
  ;; Must stay in patches where salinity is tolerable
  ;; Check salinity tolerance
  let salinity-difference abs ([salinity] of patch-here - acclimated-salinity-level)

  if salinity-difference > 2 [
  print "Salinity is intolerable. Resting or moving downstream."
  
  ;; Find a suitable patch with tolerable salinity and low velocity
  let suitable-patch one-of patches with [
      salinity <= [acclimated-salinity-level] of myself + 2 and salinity >= [acclimated-salinity-level] of myself - 2 and abs-current-velocity <= (swimming-range * 0.25)
  ]
  
  ifelse suitable-patch != nobody [
    ;; Move to a tolerable patch if one exists
    move-to suitable-patch
    print "Moved to a patch with tolerable salinity."
  ] [
    ;; If no tolerable patch is found, rest in place
    set energy energy + 0.2 ;; Regain energy slowly
    print "Resting in place to recover energy."
  ]
  
  stop ;; End the function to avoid further actions in this tick
  ]
  
  ;; where are they going?
  ;; how will fish move landward through velocity
  let upstream-patch one-of patches with [patchtype = [migration-destination] of myself]
  if upstream-patch != nobody [
    face upstream-patch
    fd speed
    set energy energy - (speed * 0.1) ;; Energy expenditure based on speed
  ]
  
  ;; what are they doing? (spawning, eating)
  ;; maybe patchtype = "upper penobscot"
  if patchtype = migration-destination [
  ; reproduce
  ; hunt
  ; forage
  ]

end
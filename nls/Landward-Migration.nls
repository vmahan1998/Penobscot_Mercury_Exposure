to calculate-difficulty-landward
  ;; Ensure required parameters exist
  let M-max max [size] of breed
  
  let M-agent size                ;; Current agent size
  let V-max max-seaward-velocity  ;; Maximum observed seaward velocity
  ;print (word "V-max: " V-max)

  let V-min max-landward-velocity ;; Maximum observed landward velocity
  ;print (word "V-min: " V-min)
  let k 0.75                      ;; Scaling exponent

  ;; **Normalize velocity within its observed range (V_min to V_max)**
  ;;let normalized-velocity (velocity - V-min) / (V-max - V-min)
  
  ;; Theoretical difficulty calculation
  let Df-raw (abs(velocity) / (max-speed * (M-agent / M-max))) ^ k

  ;; Normalize difficulty to scale 1â€“10 based on velocity bounds
  set difficulty-factor (1 + 9 * ((Df-raw - V-min) / (V-max - V-min)))  

  ;; Ensure difficulty is always within [1,10] range
  set difficulty-factor max list 1 (min list 10 difficulty-factor)

  ;; Debugging output
  ;show (word "Landward Difficulty Factor: " difficulty-factor 
  ;      " | Velocity: " velocity)
end

to calculate-swimming-speed-landward
  ;; Scaling factors
  let k -0.75  ;; Controls how velocity influences swimming ability
  let energy-factor (energy / 100)  ;; Energy-dependent swimming ability (0-1)
  
  ;; Compute desired speed (without capping)
  let velocity-impact (k * velocity * 300)  ;; Velocity directly influences speed but scale to 5 minutes
  let desired-speed (max-speed * energy-factor / difficulty-factor) + velocity-impact

  ;; Ensure speed is within valid bounds
  set desired-speed min list max-speed (max list min-speed desired-speed)

  ;; Cap rate of change (max acceleration per tick)
  let max-speed-change 0.5  ;; Maximum allowed change per tick

  ;; Apply capped rate of change
  if abs(desired-speed - prev-speed) > max-speed-change [
    if desired-speed > prev-speed [
      set speed prev-speed + max-speed-change  ;; Gradual increase
    ]
    if desired-speed < prev-speed [
      set speed prev-speed - max-speed-change  ;; Gradual decrease
    ]
  ] 
  if abs(desired-speed - prev-speed) <= max-speed-change [
    set speed desired-speed  ;; If within limits, set normally
  ]

  ;; Store previous speed for next tick
  set prev-speed speed

  ;; Debugging output
  ;show (word "Swimming Speed (m/5 min): " speed " | Energy Factor: " energy-factor " | Velocity Impact: " velocity-impact)
end

to migrate-landward
  ;; STEP 1: Schooling logic
  find-schoolmates
  
  if any? schoolmates [
    find-nearest-neighbor

    ifelse distance nearest-neighbor < minimum-separation [
      separate
    ][
      cohere
      align
    ]

    adjust-speed
  ]

  ;; STEP 2: Environmental cue â€“ move toward fast downstream velocity
  let candidates patches in-radius 2 with [patch-terrain = "water"]
  
  ifelse any? candidates [
    let best-patch min-one-of candidates [cost-to-home]
    safe-move best-patch speed
  ][
    ;; fallback: move to a random water neighbor
    let nearby-water one-of neighbors with [patch-terrain = "water"]
    if nearby-water != nobody [
      safe-move nearby-water speed
    ]
  ]
  
  ;; STEP 3 set trail and calculate energy loss
  set energy max list 0 (energy - swim-base)  ;; Reduce energy cost of swimming
  
  if not member? patch-here trail [
  set trail lput patch-here trail
]
  
end

to calculate-cost-to-home [homing-patch]
  ask homing-patch [
    set cost-to-home 0
  ]

  ;; Start with a list containing the home patch
  let frontier (list homing-patch)

  while [not empty? frontier] [
    let current first frontier
    set frontier but-first frontier

    ask current [
      let current-cost cost-to-home

      ask neighbors4 with [patch-terrain = "water"] [
        let travel-cost compute-travel-cost current self
        let new-cost current-cost + travel-cost

        if new-cost < cost-to-home [
          set cost-to-home new-cost
          set frontier lput self frontier
        ]
      ]
    ]
  ]
end

to-report compute-travel-cost [from-patch to-patch]
  ;; --- Get velocity safely ---
  let raw-vel [velocity] of to-patch
  let velocity-resistance ifelse-value is-number? raw-vel [abs raw-vel] [0]

  ;; --- Water level handling ---
  let from-level [depth] of from-patch  ;; depth = water level
  let to-level [depth] of to-patch
  let slope 0
  if (is-number? from-level and is-number? to-level) [
    set slope max list 0 (to-level - from-level)
  ]

  ;; --- Return combined cost ---
  report velocity-resistance + 0.5 * slope
end


to safe-move [target-patch move-speed]
  ;; Moves toward target only if water ahead; finds alternate if blocked
  face target-patch

  let next-patch patch-ahead move-speed
  ifelse [patch-terrain] of next-patch = "water" [
    fd move-speed
  ] [
    ;; fallback: find nearest water patch and move partially
    let nearby-water one-of patches in-radius 1 with [patch-terrain = "water"]
    if nearby-water != nobody [
      move-to nearby-water
    ]
  ]
end

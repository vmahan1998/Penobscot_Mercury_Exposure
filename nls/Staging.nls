to stage  ;; based on schooling procedure but with energy creation
  find-schoolmates

  ;; Ensure schoolmates exist before proceeding
  if any? schoolmates [
    
    ;; Find the best patch (nearest with lowest absolute velocity & water terrain)
    let target-patch min-one-of (neighbors with [patch-terrain = "water"]) [abs velocity]

    ;; If no suitable patch is found, move randomly within water terrain
    if target-patch = nobody [
      set target-patch one-of neighbors with [patch-terrain = "water"]
    ]

    ;; Only move if a valid target patch was found
    if target-patch != nobody [
      
      ;; Find the nearest schoolmate to maintain cohesion
      find-nearest-neighbor
      
      ;; Avoid duplicate positions that may cause NetLogo errors
      ;if distance nearest-neighbor = 0.00000 [ die ] ;; Uncomment if duplicate errors occur
      
      ;; Schooling behavior: maintain formation
      ifelse distance nearest-neighbor < minimum-separation
      [ separate ]  ;; Avoid crowding
      [ 
        cohere  ;; Move toward schoolmates
        align   ;; Align direction
      ]
      
      adjust-speed  ;; Adjust speed to maintain schooling behavior

      ;; Move to the target patch (either lowest velocity or fallback patch)
      move-to target-patch
    ]

    ;; Regain energy while staging
    let energy-recovery (1 + random-float 1)  ;; Small variation in recovery
    set energy energy + energy-recovery
    set staging-in-patch staging-in-patch + 1;; records sum of number of staging agents in patch
  ]
end

to color-staging-patches
  if staging-in-patch > 0 [
    set pcolor green
  ]
end
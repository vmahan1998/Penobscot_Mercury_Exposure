to calculate-difficulty-seaward
  ;; Ensure required parameters exist
  let V-max max-seaward-velocity  ;; Maximum observed seaward velocity
  let V-min max-landward-velocity ;; Maximum observed landward velocity

  ;; **Normalize velocity within its observed range (V_min to V_max)**
  let normalized-velocity (velocity - V-min) / (V-max - V-min)

  ;; **Reverse scaling: Difficulty should be highest at V_min (landward max) and lowest at V_max (seaward max)**
  set difficulty-factor (10 - (normalized-velocity * 9))  

  ;; Ensure difficulty is always within [1,10] range
  set difficulty-factor max list 1 (min list 10 difficulty-factor)

  ;; Debugging output
  show (word "Seaward Difficulty Factor: " difficulty-factor 
        " | Normalized Velocity: " normalized-velocity 
        " | Velocity: " velocity)
end

to calculate-swimming-speed-seaward
  ;; Scaling factors
  let k 0.75  ;; Controls how velocity influences swimming ability
  let energy-factor (energy / 100)  ;; Energy-dependent swimming ability (0-1)
  
  ;; Compute desired speed (without capping)
  let velocity-impact (k * velocity)  ;; Velocity directly influences speed
  let desired-speed (max-speed * energy-factor / difficulty-factor) + velocity-impact

  ;; Ensure speed is within valid bounds
  set desired-speed min list max-speed (max list min-speed desired-speed)

  ;; Cap rate of change (max acceleration per tick)
  let max-speed-change 0.2  ;; Maximum allowed change per tick

  ;; Apply capped rate of change
  if abs(desired-speed - prev-speed) > max-speed-change [
    if desired-speed > prev-speed [
      set speed prev-speed + max-speed-change  ;; Gradual increase
    ]
    if desired-speed < prev-speed [
      set speed prev-speed - max-speed-change  ;; Gradual decrease
    ]
  ] 
  if abs(desired-speed - prev-speed) <= max-speed-change [
    set speed desired-speed  ;; If within limits, set normally
  ]

  ;; Store previous speed for next tick
  set prev-speed speed

  ;; Debugging output
  show (word "Swimming Speed: " speed " | Energy Factor: " energy-factor " | Velocity Impact: " velocity-impact)
end


to migrate-seaward
set heading 180  ;; Move seaward (assuming 0Â° is upstream)
fd speed   ;; Move at current speed
end
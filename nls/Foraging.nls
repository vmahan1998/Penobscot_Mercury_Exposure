to forage
  ;; Only non-predators forage when staging and energy is low
  if (staging? and energy < 75 and ionregulatory-stress = 1 and breed != stripedbass) [

    set foraging? true


    ;; Each agent evaluates neighboring patches
    let best-spot nobody
    let best-score -1

    ask neighbors [
      let sal_opt (1 - abs(salinity - [acclimated-salinity] of myself) / 10)
      let temp_opt (1 - abs(temperature - [optimal-temperature] of myself) / 10)
      let vel_opt (1 - abs(velocity - [optimal-velocity] of myself))
      let depth_opt (1 - abs(depth - [optimal-depth] of myself) / 2.5)

      ;; Avoid divide-by-zero
      let spm_penalty 0
      if mean-SPM != 0 [
        set spm_penalty max list 0 (1 - ((SPM - mean-SPM) / mean-SPM))
      ]

      let score (sal_opt * 0.3 + temp_opt * 0.2 + vel_opt * 0.2 + depth_opt * 0.2 + spm_penalty * 0.1)
      let bounded-score max list 0 (min list 1 score)

      ;; Track the best patch for this fish
      if bounded-score > best-score [
        set best-score bounded-score
        set best-spot self
      ]
    ]

    ;; Move to the best patch
    if best-spot != nobody [
      face best-spot
      move-to best-spot
     
      ;; Track foraging stats on the patch
      ask patch-here [
        set forage-visits forage-visits + 1
      ] 
      ;; Energy gain based on the patch's score
      let gain best-score * (1.5 + random-float 2.0)  ;; gain ranges approx 1.5â€“3.5 for optimal patches
      set energy energy + gain
      if energy > 100 [ set energy 100 ]

      ;; Optional: print gain
       show (word "Energy gained: " gain)  
      
    ]
  ]
end

to update-SPM-mean
  set mean-SPM mean [SPM] of patches
end

to color-foraging-patches
  if forage-visits > 0 [
    set pcolor orange
  ]
end